{"name":"Jquery.soap","tagline":"This script uses $.ajax to send a SoapRequest. It can take XML DOM, XML string or JSON as input and the response can be returned as either XML DOM, XML string or JSON too. Thanx to proton17, Diccon Towns, Zach Shelton and Anthony-redFox! Let's $.soap()!","body":"jQuery Soap\r\n===========\r\n**file:** jquery.soap.js  \r\n**version:** 1.3.4\r\n\r\njQuery plugin for communicating with a web service using SOAP.\r\n--------------------------------------------------------------\r\nThis script uses $.ajax to send a SOAPEnvelope. It can take XML DOM, XML string or JSON as input and the response can be returned as either XML DOM, XML string or JSON too.\r\n\r\nThanx to proton17, Diccon Towns and Zach Shelton!\r\n\r\n**Let's $.soap()!**\r\n\r\n_**NOTE:** Please see my note on contacting me about issues, bugs, problems or any other questions below before sending me mail...._\r\n\r\nExample\r\n-------\r\n```Javascript\r\n$.soap({\r\n\turl: 'http://my.server.com/soapservices/',\r\n\tmethod: 'helloWorld',\r\n\r\n\tdata: {\r\n\t\tname: 'Remy Blom',\r\n\t\tmsg: 'Hi!'\r\n\t},\r\n\t\r\n\tsuccess: function (soapResponse) {\r\n\t\t// do stuff with soapResponse\r\n\t\t// if you want to have the response as JSON use soapResponse.toJSON();\r\n\t\t// or soapResponse.toString() to get XML string\r\n\t\t// or soapResponse.toXML() to get XML DOM\r\n\t},\r\n\terror: function (SOAPResponse) {\r\n\t\t// show error\r\n\t}\r\n});\r\n```\r\nwill result in\r\n```XML\r\n<soap:Envelope\r\n\txmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n\t<soap:Body>\r\n\t\t<helloWorld>\r\n\t\t\t<name>Remy Blom</name>\r\n\t\t\t<msg>Hi!</msg>\r\n\t\t</helloWorld>\r\n\t</soap:Body>\r\n</soap:Envelope>\r\n```\r\nAnd this will be send to: url + method  \r\nhttp://my.server.com/soapservices/helloWorld\r\n\r\nOptions overview\r\n----------------\r\n[More detailed list of the available options for jQuery.soap](options.md)\r\n```Javascript\r\noptions = {\r\n\turl: 'http://my.server.com/soapservices/',\t\t//endpoint address for the service\r\n\tmethod: 'helloWorld',\t\t\t\t\t\t\t// service operation name\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// 1) will be appended to url if appendMethodToURL=true\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// 2) will be used for request element name when building xml from JSON 'params' (unless 'elementName' is provided)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// 3) will be used to set SOAPAction request header if no SOAPAction is specified\r\n\tappendMethodToURL: true,\t\t\t\t\t\t// method name will be appended to URL defaults to true\r\n\tSOAPAction: 'action',\t\t\t\t\t\t\t// manually set the Request Header 'SOAPAction', defaults to the method specified above (optional)\r\n\tsoap12: false,\t\t\t\t\t\t\t\t\t// use SOAP 1.2 namespace and HTTP headers - default to false\r\n\r\n\t// addional headers and namespaces\r\n\tenvAttributes: {\t\t\t\t\t\t\t\t// additional attributes (like namespaces) for the Envelope:\r\n\t\t'xmlns:another': 'http://anotherNamespace.com/'\r\n\t}\r\n\tHTTPHeaders: {\t\t\t\t\t\t\t\t\t// additional http headers send with the $.ajax call, will be given to $.ajax({ headers: })\r\n\t\t'Authorization': 'Basic ' + btoa('user:pass')\r\n\t}\r\n\r\n\t//data can be XML DOM, XML String, JSON or a function\r\n\tdata: domXmlObject,\t\t\t\t\t\t\t\t// XML DOM object\r\n\tdata: xmlString,\t\t\t\t\t\t\t\t// XML String for request (alternative to internal build of XML from JSON 'params')\r\n\tdata: {\t\t\t\t\t\t\t\t\t\t\t// JSON structure used to build request XML - SHOULD be coupled with ('namespaceQualifier' AND 'namespaceURL') AND ('method' OR 'elementName')\r\n\t\tname: 'Remy Blom',\r\n\t\tmsg: 'Hi!'\r\n\t},\r\n\tdata: function(SOAPObject) {\t\t\t\t\t// function returning an instance of the SOAPObject class \r\n\t\treturn new SOAPObject('soap:Envelope')\r\n\t\t\t.addNamespace('soap', 'http://schemas.xmlsoap.org/soap/envelope/')\r\n\t\t\t.newChild('soap:Body')\r\n\t\t\t\t... etc, etc\r\n\t\t\t.end()\r\n\t},\r\n\r\n\t//these options ONLY apply when the request XML is going to be built from JSON 'params'\r\n\tnamespaceQualifier: 'myns',\t\t\t\t\t\t// used as namespace prefix for all elements in request (optional)\r\n\tnamespaceURL: 'urn://service.my.server.com',\t// namespace url added to parent request element (optional)\r\n\tnoPrefix: false,\t\t\t\t\t\t\t\t// set to true if you don't want the namespaceQualifier to be the prefix for the nodes in params. defaults to false (optional)\r\n\telementName: 'requestElementName',\t\t\t\t// override 'method' as outer element (optional)\r\n\r\n\t// WS-Security\r\n\twss: {\r\n\t\tusername: 'user',\r\n\t\tpassword: 'pass',\r\n\t\tnonce: 'w08370jf7340qephufqp3r4',\r\n\t\tcreated: new Date().getTime()\r\n\t},\r\n\r\n\t//callback functions\r\n\tbeforeSend: function (SOAPEnvelope)  {},\t\t\t// callback function - SOAPEnvelope object is passed back prior to ajax call (optional)\r\n\tsuccess: function (SOAPResponse) {},\t\t\t// callback function to handle successful return (optional)\r\n\terror:   function (SOAPResponse) {},\t\t\t// callback function to handle fault return (optional)\r\n\r\n\t// debugging\r\n\tenableLogging: false\t\t\t\t\t\t\t// to enable the local log function set to true, defaults to false (optional)\r\n}\r\n```\r\n\r\nDeprecated options\r\n------------------\r\nTo keep the names of the options a bit more consistent with common naming conventions I renamed a few options:\r\n\r\nold | new | reason\r\n--- | --- | ---\r\nnapespaceUrl | namespaceURL | to capitalize URL is quite common\r\nparams | data | $.ajax uses data too, more consistent\r\nrequest | beforeSend | $.ajax uses data too, more consistent\r\n\r\nThe old names are mapped to the new names and will be deprecated at version 2.0.0 (that might take years, or decades). A warning is printed to the console when you use an old name.\r\n\r\nPromise\r\n-------\r\nSince version 1.3.0 $.soap() returns the jqXHR object which implements the Promise interface. This allows you to use `.done()`, `.fail()`, `.always()`, etc. So instead of using the `success` and `error` option, you can also do:\r\n```\r\n$.soap({\r\n\t...\r\n}).done(function(data, textStatus, jqXHR) {\r\n\t// do stuff on success here...\r\n}).fail(function(jqXHR, textStatus, errorThrown) {\r\n\t// do stuff on error here...\r\n})\r\n```\r\nThe advantage is that these promise callbacks give you direct access to the original parameters provided by $.ajax instead of $.soap's SOAPResponse objects.\r\n\r\nglobalConfig\r\n------------\r\nSince version 0.9.3 it is possible to make a call to **$.soap** just to set extra config values. When you have a lot of calls to $.soap and are tired of repeating the same values for url, namespace and error for instance, this new approach can come in handy:\r\n```Javascript\r\n$.soap({\r\n\turl: 'http://my.server.com/soapservices/',\r\n\tnamespaceQualifier: 'myns',\r\n\tnamespaceURL: 'urn://service.my.server.com',\r\n\terror: function (soapResponse) {\r\n\t\t// show error\r\n\t}\r\n});\r\n\r\n$.soap({\r\n\tmethod: 'helloWorld',\r\n\tdata: {\r\n\t\tname: 'Remy Blom',\r\n\t\tmsg: 'Hi!'\r\n\t},\r\n\tsuccess: function (soapResponse) {\r\n\t\t// do stuff with soapResponse\r\n\t}\r\n});\r\n```\r\nThe code above will do exactly the same as the first example, but when you want to do another call to the same soapserver you only have to specify the changed values:\r\n```Javascript\r\n$.soap({\r\n\tmethod: 'doSomethingElse',\r\n\tdata: {...},\r\n\tsuccess: function (soapResponse) {\r\n\t\t// do stuff with soapResponse\r\n\t}\r\n});\r\n```\r\nBut it won't stop you from doing a call to a completely different soapserver with a different error handler for instance, like so:\r\n```Javascript\r\n$.soap({\r\n\turl: 'http://another.server.com/anotherService'\r\n\tmethod: 'helloWorld',\r\n\tdata: {\r\n\t\tname: 'Remy Blom',\r\n\t\tmsg: 'Hi!'\r\n\t},\r\n\tsuccess: function (soapResponse) {\r\n\t\t// do stuff with soapResponse\r\n\t},\r\n\terror: function (soapResponse) {\r\n\t\talert('that other server might be down...')\r\n\t}\r\n});\r\n```\r\n_**NOTE**: the **data** parameter is used as a key. If no data is specified in the options passed to **$.soap** all options are stored in the globalConfig, a SOAPEnvelope won't be created, there will be nothing to send. When a method is specified the globalConfig will be used and all options passed to **$.soap** will overrule those in globalConfig, but keep in mind, they won't be overwritten!_\r\n\r\nWS-Security\r\n-----------\r\nAs from version 1.1.0 jQuery.soap supports a very basic form of WSS. This feature was requested (issue #9) and rather easy to implement, but I don't have a way to test it properly. So if you run into problems, please let me know (see below)\r\n```\r\n$.soap({\r\n\t// other parameters..\r\n\r\n\t// WS-Security\r\n\twss: {\r\n\t\tusername: 'user',\r\n\t\tpassword: 'pass',\r\n\t\tnonce: 'w08370jf7340qephufqp3r4',\r\n\t\tcreated: new Date().getTime()\r\n\t}\r\n});\r\n```\r\n\r\nHTTP Basic Authorization\r\n------------------------\r\nUsing the HTTPHeaders option it is relatively simple to implement HTTP Basic Authorization as follows:\r\n```Javascript\r\nvar username = 'foo';\r\nvar password = 'bar';\r\n\r\n$.soap({\r\n\t// other parameters...\r\n\r\n\tHTTPHeaders: {\r\n\t\tAuthorization: 'Basic ' + btoa(username + ':' + password)\r\n\t}\r\n});\r\n```\r\n\r\nSame Origin Policy\r\n------------------\r\nYou won't be able to have a page on http://www.example.com do an ajax call ($.soap is using $.ajax internally) to http://www.anotherdomain.com due to Same Origin Policy. To overcome this you should either install a proxy on http://www.example.com or use CORS. Keep in mind that it also not allowed to go from http://www.example.com to http://soap.example.com or even to http://www.example.com:8080\r\n\r\nSome links on **circumventing same origin policy**\r\n\r\nhttp://stackoverflow.com/questions/3076414/ways-to-circumvent-the-same-origin-policy  \r\nhttp://usamadar.com/2012/06/24/getting-around-browsers-same-origin-policy-sop-with-proxies-script-injection-jsonp-and-cors/  \r\n\r\nDemo page\r\n---------\r\nI included a simple demo page that you can use for testing. It allows you to play around with all the options for $.soap. Please take note that to make it work with your SOAP services you are again bound by the **same origin policy**.\r\n\r\nDependencies\r\n------------\r\njQuery -- built and tested with v1.10.2, MAY work back to v1.6  \r\nSOAPResponse.toJSON() depends on **jQuery.xml2json.js**\r\n\r\nContacting me\r\n-------------\r\nPlease note I don't mind you contacting me when you run into trouble implementing this plugin, but to keep things nice for me too, just follow these simple guidelines when you do:\r\n\r\n- First make sure you're not getting an error because of **same origin policy**!\r\n- Check the [issues section](https://github.com/doedje/jquery.soap/issues/) and the [closed issues section](https://github.com/doedje/jquery.soap/issues?page=1&state=closed) to see if someone else already had your problem, if not\r\n- Open an issue in the [issues section](https://github.com/doedje/jquery.soap/issues/) instead of sending me mail. This way others can learn from your case too! Please include the following:\r\n\t- the versions of your jquery and jquery.soap\r\n\t- your $.soap call\r\n\t- the request as sent to the server\r\n\t- the response from the server\r\n- Being polite helps, especially when you want me to help you with _your_ problems. So please take the time to formulate something like a question. Opening an issue with just some code sniplets and error messages will be regarded as **unpolite** and will receive a ditto reply. \r\n(I just don't like receiving stuff like [issue #18](https://github.com/doedje/jquery.soap/issues/18) on a sunday)\r\n\r\n_I also have a dayjob with deadlines and I'm a dad of two lovely little girls, so please understand I am not always able to reply to you asap..._\r\n\r\n**Thanx for understanding!! =]**\r\n\r\nLicense GNU/GPLv3\r\n-----------------\r\njquery.soap is based on jqSOAPClient.beta.js which was licensed under GNU/GPLv3\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program. If not, see <http://www.gnu.org/licenses/>.\r\n\r\n**I may consider permitting uses outside of the license terms on a by-case basis.**\r\n\r\nAuthors / History\r\n-----------------\r\n2013-10 >> total rewrite, triggered by pull request #21 by anthony-redFox == https://github.com/anthony-redFox/jquery.soap/\r\nRemy Blom == https://github.com/doedje/jquery.soap\r\n\r\n2013-06 >> fix for SOAPServer and SOAPAction headers, better params object to SOAPObject function  \r\nRemy Blom == https://github.com/doedje/jquery.soap\r\n\r\n2013-03 >> update internal OO structure, enable XML & object input as well as JSON  \r\nZach Shelton == zachofalltrades.net  \r\nhttps://github.com/zachofalltrades/jquery.soap\r\n\r\n2013-02-19 >> published to plugins.jquery.com/soap/  \r\nRemy Blom == https://github.com/doedje/jquery.soap\r\n\r\n2011-10-31 >> fix handling of arrays in JSON paramaters  \r\nDiccon Towns == dtowns@reapit.com\r\n\r\n2009-12-03 >> wrap jqSOAPClient as plugin  \r\nRemy Blom == https://github.com/doedje/jquery.soap\r\n\r\n2007-12-20 >> jqSOAPClient.beta.js by proton17  \r\nhttp://archive.plugins.jquery.com/project/jqSOAPClient\r\n\r\nChangelog\r\n---------\r\nVersion numbers are [semver](http://semver.org/) compatible from version 1.0.0 and up.\r\n\r\nVersion | Date | Changes\r\n--- | --- | ---\r\n1.3.4 | 2014-02-08 | Fix to the manifest file, new version# needed to publish to plugins.jquery.com\r\n1.3.3 | 2014-02-08 | bugfix: fixed json2soap for arrays\r\n1.3.2 | 2014-01-16 | bugfix: _async_ defaulted to **false**? should have been **true**\r\n1.3.1 | 2013-11-04 | minor changes: SOAPRequest is now SOAPEnvelope, request is now beforeSend\r\n1.3.0 | 2013-10-31 | massive rewrite (fixes #14, #19, #20, lot of stuff from #21, #23)\r\n1.2.2 | 2013-10-31 | fix for #24: a parameter set to NULL should be translated as &lt;language nil=\"true\" /&gt;\r\n1.2.1 | 2013-09-09 | fixed WSS namespace: from Soap:Security to wsse:Security (pull request #17)\r\n1.2.0 | 2013-08-26 | added noPrefix option and fixed bug of double namespace prefixes for nested objects (#13, #15)\r\n1.1.0 | 2013-07-11 | Added WSS functionality (issue #9)\r\n1.0.7 | 2013-07-03 | Changed the license to GNU GPLv3, I could never have used the MIT license since jqSOAPClient.beta.js is already licensed GNU GPLv3\r\n1.0.6 | 2013-06-27 | params object to SOAPObject code fixed for complex object/array combi's\r\n1.0.5 | 2013-06-20 | enableLogging is an option, changed namespaceUrl to namespaceURL (with fallback)\r\n1.0.4 | 2013-06-20 | Fix to the manifest file, new version# needed to publish to plugins.jquery.com\r\n1.0.3 | 2013-06-20 | Included a little demo and fixed SOAPServer and SOAPAction request headers\r\n1.0.2 | 2013-04-02 | Fix to the manifest file, new version# needed to publish to plugins.jquery.com\r\n1.0.1 | 2013-04-02 | Fix to the manifest file, new version# needed to publish to plugins.jquery.com\r\n1.0.0 | 2013-04-02 | Minor fix (return for dom2string in reponse)\r\n0.10.0 | 2013-03-29 | The **First Zach Shelton version**, better code, XML DOM, XML string and JSON in and out\r\n0.9.4 | 2013-02-26 | changed the charset of the $.ajax call to UTF-8 and removed the \" quotes\r\n0.9.3 | 2013-02-26 | Added the possibility to call **$.soap** just to set extra config values.\r\n0.9.2 | 2013-02-21 | some extra cleaning of stupid code in my part of the script. Now it uses the addNamespace function to properly set namespaces.\r\n0.9.1 | 2013-02-20 | minor changes to keep LINT happy.\r\n0.9.0 | 2013-02-20 | first version to go on the new jQuery plugin page, changed the name of the function from $.soapRequest to **$.soap**\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}